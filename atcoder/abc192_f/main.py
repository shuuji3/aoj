#!/usr/bin/env python3
# from typing import *

from itertools import chain, combinations

# ref. 9.7. itertools — Functions creating iterators for efficient looping — Python 2.7.18 documentation
# - https://docs.python.org/2/library/itertools.html#recipes
def powerset(iterable):
     "powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
     s = list(iterable)
     return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

# def solve(N: int, X: int, A: List[int]) -> int:
def solve(N, X, A):
    answer_candidates = []
    for s in powerset(range(N)):
        if len(s) == 0:
            continue # skip () tuple
        k = len(s)
        init = 0
        for i in s:
            init += A[i]

        # cross point between the time-power line and target
        t = (X - init) / k
        if t % 1 == 0: # t should be integer
            answer_candidates.append(int(t))

    return min(answer_candidates)

# generated by oj-template v4.7.2 (https://github.com/online-judge-tools/template-generator)
def main():
    import sys
    tokens = iter(sys.stdin.read().split())
    N = int(next(tokens))
    X = int(next(tokens))
    A = [None for _ in range(N)]
    for i in range(N):
        A[i] = int(next(tokens))
    assert next(tokens, None) is None
    a = solve(N, X, A)
    print(a)

if __name__ == '__main__':
    main()
